{"ast":null,"code":"export const sanitizeText = text => {\n  const replacements = [{\n    pattern: /\\bsex\\b/gi,\n    replacement: 's*x'\n  }, {\n    pattern: /\\bbetichod\\b/gi,\n    replacement: 'beti***d'\n  }, {\n    pattern: /\\bbhosdiwale\\b/gi,\n    replacement: 'bhos****e'\n  }, {\n    pattern: /\\bchutiya\\b/gi,\n    replacement: 'chu***a'\n  }, {\n    pattern: /\\bmadarchod\\b/gi,\n    replacement: 'mada***d'\n  }, {\n    pattern: /\\bbhenchod\\b/gi,\n    replacement: 'bhen***d'\n  }, {\n    pattern: /\\bgandu\\b/gi,\n    replacement: 'gan*u'\n  }, {\n    pattern: /\\blund\\b/gi,\n    replacement: 'l**d'\n  }, {\n    pattern: /\\blavde\\b/gi,\n    replacement: 'lav*e'\n  }, {\n    pattern: /\\brandi\\b/gi,\n    replacement: 'r*ndi'\n  }, {\n    pattern: /\\bsaala\\b/gi,\n    replacement: 's**la'\n  }, {\n    pattern: /\\bkutte\\b/gi,\n    replacement: 'ku**e'\n  }, {\n    pattern: /\\bharami\\b/gi,\n    replacement: 'hara*i'\n  }, {\n    pattern: /\\bkaminey\\b/gi,\n    replacement: 'kamin*y'\n  }, {\n    pattern: /\\bchutiye\\b/gi,\n    replacement: 'chut*ye'\n  }, {\n    pattern: /\\btatti\\b/gi,\n    replacement: 'ta**i'\n  }, {\n    pattern: /\\bchut\\b/gi,\n    replacement: 'ch*t'\n  }, {\n    pattern: /\\bbhosda\\b/gi,\n    replacement: 'bhos*a'\n  }, {\n    pattern: /\\bbhadwa\\b/gi,\n    replacement: 'bhad*a'\n  }, {\n    pattern: /\\bchinal\\b/gi,\n    replacement: 'chi*al'\n  }, {\n    pattern: /\\btere maa ki\\b/gi,\n    replacement: 'tere maa k*'\n  }, {\n    pattern: /\\bteri maa ka\\b/gi,\n    replacement: 'teri maa k*'\n  }];\n  let sanitizedText = text;\n  replacements.forEach(({\n    pattern,\n    replacement\n  }) => {\n    sanitizedText = sanitizedText.replace(pattern, replacement);\n  });\n  sanitizedText = sanitizedText.replace(/\\d/g, ''); // Remove all digits\n\n  return sanitizedText;\n};","map":{"version":3,"names":["sanitizeText","text","replacements","pattern","replacement","sanitizedText","forEach","replace"],"sources":["F:/Blog-Page/client/src/components/create/textSanitizer.js"],"sourcesContent":["export const sanitizeText = (text) => {\r\n    const replacements = [\r\n      { pattern: /\\bsex\\b/gi, replacement: 's*x' },\r\n      { pattern: /\\bbetichod\\b/gi, replacement: 'beti***d' },\r\n      { pattern: /\\bbhosdiwale\\b/gi, replacement: 'bhos****e' },\r\n      { pattern: /\\bchutiya\\b/gi, replacement: 'chu***a' },\r\n      { pattern: /\\bmadarchod\\b/gi, replacement: 'mada***d' },\r\n      { pattern: /\\bbhenchod\\b/gi, replacement: 'bhen***d' },\r\n      { pattern: /\\bgandu\\b/gi, replacement: 'gan*u' },\r\n      { pattern: /\\blund\\b/gi, replacement: 'l**d' },\r\n      { pattern: /\\blavde\\b/gi, replacement: 'lav*e' },\r\n      { pattern: /\\brandi\\b/gi, replacement: 'r*ndi' },\r\n      { pattern: /\\bsaala\\b/gi, replacement: 's**la' },\r\n      { pattern: /\\bkutte\\b/gi, replacement: 'ku**e' },\r\n      { pattern: /\\bharami\\b/gi, replacement: 'hara*i' },\r\n      { pattern: /\\bkaminey\\b/gi, replacement: 'kamin*y' },\r\n      { pattern: /\\bchutiye\\b/gi, replacement: 'chut*ye' },\r\n      { pattern: /\\btatti\\b/gi, replacement: 'ta**i' },\r\n      { pattern: /\\bchut\\b/gi, replacement: 'ch*t' },\r\n      { pattern: /\\bbhosda\\b/gi, replacement: 'bhos*a' },\r\n      { pattern: /\\bbhadwa\\b/gi, replacement: 'bhad*a' },\r\n      { pattern: /\\bchinal\\b/gi, replacement: 'chi*al' },\r\n      { pattern: /\\btere maa ki\\b/gi, replacement: 'tere maa k*' },\r\n      { pattern: /\\bteri maa ka\\b/gi, replacement: 'teri maa k*' },\r\n    ];\r\n  \r\n    let sanitizedText = text;\r\n    replacements.forEach(({ pattern, replacement }) => {\r\n      sanitizedText = sanitizedText.replace(pattern, replacement);\r\n    });\r\n  \r\n    sanitizedText = sanitizedText.replace(/\\d/g, ''); // Remove all digits\r\n  \r\n    return sanitizedText;\r\n  };\r\n  "],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAIC,IAAI,IAAK;EAClC,MAAMC,YAAY,GAAG,CACnB;IAAEC,OAAO,EAAE,WAAW;IAAEC,WAAW,EAAE;EAAM,CAAC,EAC5C;IAAED,OAAO,EAAE,gBAAgB;IAAEC,WAAW,EAAE;EAAW,CAAC,EACtD;IAAED,OAAO,EAAE,kBAAkB;IAAEC,WAAW,EAAE;EAAY,CAAC,EACzD;IAAED,OAAO,EAAE,eAAe;IAAEC,WAAW,EAAE;EAAU,CAAC,EACpD;IAAED,OAAO,EAAE,iBAAiB;IAAEC,WAAW,EAAE;EAAW,CAAC,EACvD;IAAED,OAAO,EAAE,gBAAgB;IAAEC,WAAW,EAAE;EAAW,CAAC,EACtD;IAAED,OAAO,EAAE,aAAa;IAAEC,WAAW,EAAE;EAAQ,CAAC,EAChD;IAAED,OAAO,EAAE,YAAY;IAAEC,WAAW,EAAE;EAAO,CAAC,EAC9C;IAAED,OAAO,EAAE,aAAa;IAAEC,WAAW,EAAE;EAAQ,CAAC,EAChD;IAAED,OAAO,EAAE,aAAa;IAAEC,WAAW,EAAE;EAAQ,CAAC,EAChD;IAAED,OAAO,EAAE,aAAa;IAAEC,WAAW,EAAE;EAAQ,CAAC,EAChD;IAAED,OAAO,EAAE,aAAa;IAAEC,WAAW,EAAE;EAAQ,CAAC,EAChD;IAAED,OAAO,EAAE,cAAc;IAAEC,WAAW,EAAE;EAAS,CAAC,EAClD;IAAED,OAAO,EAAE,eAAe;IAAEC,WAAW,EAAE;EAAU,CAAC,EACpD;IAAED,OAAO,EAAE,eAAe;IAAEC,WAAW,EAAE;EAAU,CAAC,EACpD;IAAED,OAAO,EAAE,aAAa;IAAEC,WAAW,EAAE;EAAQ,CAAC,EAChD;IAAED,OAAO,EAAE,YAAY;IAAEC,WAAW,EAAE;EAAO,CAAC,EAC9C;IAAED,OAAO,EAAE,cAAc;IAAEC,WAAW,EAAE;EAAS,CAAC,EAClD;IAAED,OAAO,EAAE,cAAc;IAAEC,WAAW,EAAE;EAAS,CAAC,EAClD;IAAED,OAAO,EAAE,cAAc;IAAEC,WAAW,EAAE;EAAS,CAAC,EAClD;IAAED,OAAO,EAAE,mBAAmB;IAAEC,WAAW,EAAE;EAAc,CAAC,EAC5D;IAAED,OAAO,EAAE,mBAAmB;IAAEC,WAAW,EAAE;EAAc,CAAC,CAC7D;EAED,IAAIC,aAAa,GAAGJ,IAAI;EACxBC,YAAY,CAACI,OAAO,CAAC,CAAC;IAAEH,OAAO;IAAEC;EAAY,CAAC,KAAK;IACjDC,aAAa,GAAGA,aAAa,CAACE,OAAO,CAACJ,OAAO,EAAEC,WAAW,CAAC;EAC7D,CAAC,CAAC;EAEFC,aAAa,GAAGA,aAAa,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;;EAElD,OAAOF,aAAa;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}